/*
    날짜 : 2025/07/22
    이름 : 이다은
    내용 : SQL 연습문제3
*/

-- 실습 3-1

-- 실습 3-2
create table CUSTOMER(
    C_ID CHAR(14) PRIMARY KEY,
    C_NAME VARCHAR2(20) NOT NULL,
    C_TYPE NUMBER(1) NOT NULL,
    C_HP CHAR(14) NOT NULL,
    C_ADDR VARCHAR2(100) DEFAULT NULL
);
create table ACCOUNT(
    ACC_NO CHAR(11) PRIMARY KEY,
    ACC_TYPE CHAR(2) NOT NULL,
    ACC_NAME VARCHAR2(20) NOT NULL,
    ACC_CID CHAR(14) NOT NULL,
    ACC_BALANCE NUMBER DEFAULT 0,
    ACC_DATE DATE NOT NULL,
    FOREIGN KEY (ACC_CID) REFERENCES CUSTOMER (C_ID)
);


create table TRANSACTION(
    TR_NO NUMBER GENERATED by default as IDENTITY primary key,
    TR_ACC CHAR(11) NOT NULL,
    TR_TYPE NUMBER(1) NOT NULL,
    TR_AMOUNT NUMBER DEFAULT 0,
    TR_DATE DATE NOT NULL,
    FOREIGN KEY (TR_ACC) REFERENCES ACCOUNT (ACC_NO)
);

-- 실습 3-3
insert into CUSTOMER values ('730423-1000001', '김유신', 1, '010-1234-1001', '경기도
수원시');
insert into CUSTOMER values ('750210-1000002', '김춘추', 1, '010-1234-1002', '경기도
광주시');
insert into CUSTOMER values ('830513-2000003', '선덕여왕', 1, '010-1234-1003', '서울시 마포구');
insert into CUSTOMER values ('870830-1000004', '강감찬', 1, '010-1234-1004', '서울시
영등포구');
insert into CUSTOMER values ('910913-2000005', '신사임당', 1, '010-1234-1005', '강원도
강릉시');
insert into CUSTOMER values ('941127-1000006', '이순신', 1, '010-1234-1006', '부산시
영도구');
insert into CUSTOMER values ('220-83-52237', '(주)한국전산', 2, '03-1234-1045', '서울시
강서구');
insert into CUSTOMER values ('361-23-42687', '(주)정보산업', 2, '031-563-1253', '경기도
광명시');
insert into CUSTOMER values ('103-23-51094', '부산의원', 2, '051-518-1010', '부산시
남구');

insert into ACCOUNT values('101-11-1001', 'S1', '자유저축예금', '730423-1000001', 420000, '2005-07-21 12:10:03');
insert into ACCOUNT values('101-13-1002', 'S2', '정기적립예금', '830513-2000003', 1020000, '2011-05-13 13:20:12');
insert into ACCOUNT values('101-11-1003', 'S1', '자유저축예금', '870830-1000004', 53000, '2007-03-17 21:54:06');
insert into ACCOUNT values('101-21-1004', 'L1', '고객신용대출', '910913-2000005', 1200500, '2009-08-25 14:34:57');
insert into ACCOUNT values('101-13-1005', 'S3', '주택청약예금', '941127-1000006', 720800, '2013-10-15 19:56:34');
insert into ACCOUNT values('101-23-1006', 'L2', '예금담보대출', '730423-1000001', 250000, '2013-12-11 18:14:22');
insert into ACCOUNT values('101-23-1007', 'L2', '주택담보대출', '750210-1000002', 2700000, '2020-09-23 09:19:13');
insert into ACCOUNT values('101-11-2001', 'S1', '자유저축예금', '220-83-52237', 23000000, '2003-04-14 11:02:43');
insert into ACCOUNT values('101-11-2002', 'S1', '자유저축예금', '361-23-42687', 4201000, '2008-12-30 12:32:59');
insert into ACCOUNT values('101-11-2003', 'S1', '자유저축예금', '103-23-51094', 8325010, '2010-06-07 15:47:04');

insert into TRANSACTION values (1, '101-11-1001', 1, 50000, '2025-07-12 13:55:31');
insert into TRANSACTION values (2, '101-11-1003', 1, 120000, '2025-07-12 14:15:22');
insert into TRANSACTION values (3, '101-11-2001', 2, 300000, '2025-07-19 17:53:42');
insert into TRANSACTION values (4, '101-13-1002', 1, 1000000, '2025-07-20 07:25:08');
insert into TRANSACTION (TR_NO, TR_ACC, TR_TYPE, TR_DATE) values (5, '101-11-1001', 0, '2025-07-20 09:21:13');
insert into TRANSACTION values (6, '101-13-1005', 1, 200000, '2025-07-20 10:15:02');
insert into TRANSACTION values (7, '101-11-1001', 1, 450000, '2025-07-20 11:34:42');
insert into TRANSACTION values (8, '101-11-2002', 2, 32000, '2025-07-21 09:12:37');
insert into TRANSACTION (TR_NO, TR_ACC, TR_TYPE, TR_DATE) values (9, '101-11-2003', 0, '2025-07-21 16:02:31');
insert into TRANSACTION values (10, '101-11-1003', 2, 75000, '2025-07-21 17:41:11');

-- 실습 3-4
SELECT * FROM ACCOUNT;

-- 실습 3-5
SELECT * FROM CUSTOMER;

-- 실습 3-6
SELECT * FROM TRANSACTION
WHERE TR_TYPE=1 OR TR_TYPE=2;

-- 실습 3-7
SELECT C_NAME, C_ID FROM CUSTOMER;

-- 실습 3-8
SELECT ACC_TYPE, ACC_NAME FROM ACCOUNT;

-- 실습 3-9
SELECT DISTINCT ACC_TYPE, ACC_NAME FROM ACCOUNT;

-- 실습 3-10
SELECT * FROM ACCOUNT WHERE ACC_BALANCE >= 1000000 AND ACC_NAME='자유저축예금';

-- 실습 3-11
SELECT * FROM CUSTOMER WHERE C_ADDR LIKE '경기도%';

-- 실습 3-12
SELECT * FROM CUSTOMER WHERE C_TYPE=2;

-- 실습 3-13
SELECT * FROM TRANSACTION WHERE TR_TYPE=1;

-- 실습 3-14
SELECT * FROM TRANSACTION WHERE TR_TYPE=2
ORDER BY TR_AMOUNT DESC;

-- 실습 3-15
SELECT SUM(TR_AMOUNT) as 입금총합, AVG(TR_AMOUNT) as 입금평균
from TRANSACTION where TR_TYPE=1;

-- 실습 3-16
SELECT
    MAX(TR_AMOUNT) AS "큰 금액",
    MIN(TR_AMOUNT) AS "작은 금액"
FROM TRANSACTION
WHERE TR_TYPE = 2;

-- 실습 3-17
SELECT * from ACCOUNT
WHERE 
    ACC_NAME='자유저축예금'
    AND ACC_BALANCE>=1000000
ORDER BY ACC_BALANCE DESC;

-- 실습 3-18
SELECT * FROM ACCOUNT
WHERE ACC_NAME='자유저축예금'
ORDER BY ACC_BALANCE DESC
FETCH FIRST 1 ROW ONLY;

-- 실습 3-19
SELECT * FROM TRANSACTION 
WHERE TR_TYPE IN (1, 2)
ORDER BY TR_TYPE, TR_AMOUNT DESC;

-- 실습 3-20 ***
SELECT COUNT(CASE WHEN TR_TYPE=0 THEN 1 END) AS "조회 건수",
    COUNT(CASE WHEN TR_TYPE=1 THEN 1 END) AS "입금 건수",
    COUNT(CASE WHEN TR_TYPE=2 THEN 1 END) AS "출금 건수"
FROM TRANSACTION;

-- 실습 3-21 ***
SELECT TR_TYPE,
    CASE
        WHEN TR_TYPE=1 THEN '입금'
        WHEN TR_TYPE=2 THEN '출금'
        WHEN TR_TYPE=0 THEN '조회'
    END AS 거래종류,
    TR_ACC, TR_AMOUNT
FROM TRANSACTION;

-- 실습 3-22
SELECT TR_TYPE, COUNT(TR_NO) FROM TRANSACTION
GROUP BY TR_TYPE ORDER BY TR_TYPE ASC;

-- 실습 3-23
SELECT
    TR_ACC, TR_TYPE,
    SUM(TR_AMOUNT) AS 합계
FROM TRANSACTION
WHERE TR_TYPE=1
GROUP BY TR_ACC, TR_TYPE
HAVING SUM(TR_AMOUNT)>=100000
ORDER BY SUM(TR_AMOUNT) DESC;

-- 실습 3-24 ***
SELECT 
    TR_ACC,
    COUNT(*) AS 거래건수,
    SUM(TR_AMOUNT) AS 총거래금액
FROM TRANSACTION
WHERE TR_TYPE IN (1, 2)
GROUP BY TR_ACC
HAVING SUM(TR_AMOUNT)>=100000
ORDER BY SUM(TR_AMOUNT) DESC
OFFSET 1 ROWS FETCH NEXT 2 ROWS ONLY;

-- 실습 3-25
SELECT
    ACC_NO, ACC_NAME,
    C_ID, C_NAME,
    ACC_BALANCE, ACC_DATE
FROM ACCOUNT a
join CUSTOMER c on c.c_id = a.acc_cid;

-- 실습 3-26
SELECT
    ACC_NO as 계좌번호, ACC_NAME as 계좌이름,
    C_ID as "주민번호(사업자번호)", C_NAME as 고객명,
    ACC_BALANCE as 현재잔액
FROM ACCOUNT a
JOIN CUSTOMER c on c.c_id = a.acc_cid
WHERE ACC_BALANCE >= 1000000
order by acc_balance desc;

-- 실습 3-27
select
    TR_NO, TR_ACC, 
    ACC_CID,
    TR_TYPE, TR_AMOUNT, TR_DATE
FROM TRANSACTION t
join ACCOUNT a on a.ACC_NO = t.TR_ACC
order by TR_NO;

-- 실습 3-28 ***
SELECT
    ACC_NO,
    C_NAME,
    SUM(case when TR_type=1 then tr_amount else 0 end) as 총입금액,
    SUM(case when tr_type=2 then TR_AMOUNT else 0 end) as 총출금액
FROM ACCOUNT a
join CUSTOMER c on a.acc_cid = c.c_id
LEFT join TRANSACTION t on a.acc_no = t.tr_acc
where c.c_type = 1
group by acc_no, c_name;

-- 실습 3-29
SELECT
    a.ACC_NO,
    a.ACC_CID,
    a.ACC_NAME,
    c.C_NAME,
    a.ACC_BALANCE
        + SUM(CASE WHEN t.TR_TYPE=1 THEN t.TR_AMOUNT ELSE 0 END)
        - SUM(CASE WHEN t.TR_TYPE=2 THEN t.TR_AMOUNT ELSE 0 END)
        AS 최종잔액
FROM ACCOUNT a
LEFT join TRANSACTION t on a.ACC_NO = t.TR_ACC
join CUSTOMER c ON a.ACC_CID = c.C_ID
WHERE C_TYPE = 1
GROUP BY
    a.ACC_NO, a.ACC_CID,
    a.ACC_NAME, a.ACC_BALANCE,
    c.C_NAME
ORDER BY a.ACC_NO;

-- 실습 3-30
SELECT
    c.C_NAME,
    a.ACC_NO,
    t.TOTAL_DEPOSIT,
    c.C_ADDR
FROM ACCOUNT a
JOIN CUSTOMER c on a.ACC_CID = c.C_ID
JOIN ( SELECT
            TR_ACC,
            SUM(TR_AMOUNT) AS TOTAL_DEPOSIT
        FROM TRANSACTION
        WHERE TR_TYPE = 1
        GROUP BY TR_ACC
) t on a.ACC_NO = t.TR_ACC
WHERE t.TOTAL_DEPOSIT = (
    SELECT
        MAX(SUM_AMOUNT)
    FROM (
        SELECT
            TR_ACC,
            SUM(TR_AMOUNT) AS SUM_AMOUNT
        FROM TRANSACTION
        WHERE TR_TYPE = 1
        GROUP BY TR_ACC
    )
);



-- 실습 3-20 ***
SELECT
    COUNT(CASE WHEN TR_TYPE=0 THEN 1 END) AS "조회 건수",
    COUNT(CASE WHEN TR_TYPE=1 THEN 1 END) AS "입금 건수",
    COUNT(CASE WHEN TR_TYPE=2 THEN 2 END) AS "출금 건수"
FROM TRANSACTION;

-- 실습 3-21 ***
SELECT 
    TR_TYPE,
    CASE
        WHEN TR_TYPE=0 THEN '조회'
        WHEN TR_TYPE=1 THEN '입금'
        WHEN TR_TYPE=2 THEN '출금'
    END AS "거래 종류",
    TR_ACC,
    TR_AMOUNT
FROM TRANSACTION;

-- 실습 3-24 ***
SELECT
    TR_ACC,
    COUNT(*) AS 거래건수,
    SUM(TR_AMOUNT) AS 총거래금액
FROM TRANSACTION
WHERE TR_TYPE in (1, 2)
GROUP BY TR_ACC
HAVING SUM(TR_AMOUNT) >= 100000
ORDER BY SUM(TR_AMOUNT) DESC
OFFSET 1 ROWS FETCH NEXT 2 ROWS ONLY; 

-- 실습 3-28 ***
SELECT
    ACC_NO,
    C_NAME,
    SUM(CASE WHEN TR_TYPE=1 THEN TR_AMOUNT ELSE 0 END) AS 총입금액,
    SUM(CASE WHEN TR_TYPE=2 THEN TR_AMOUNT ELSE 0 END) AS 총출금액
FROM TRANSACTION t
right join ACCOUNT a on t.TR_ACC = a.ACC_NO
join CUSTOMER c on c.c_id = a.acc_cid
where c.C_TYPE = 1
group by ACC_NO, C_NAME;