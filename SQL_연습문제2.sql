/*
    날짜 : 2025/07/18
    이름 : 이다은
    내용 : SQL 연습문제2
*/

-- 실습 2-1

-- 실습 2-2
create table Student(
    stdNo char(8) primary key,
    Name varchar2(20) not null,
    Birth date not null,
    Major varchar2(20) default null,
    ENR_DATE date not null
);

create table Course(
    CS_ID NUMBER(4) primary key,
    CS_NAME NVARCHAR2(20) NOT NULL,
    CS_Credit NUMBER(1) NOT NULL,
    CS_DEPT VARCHAR2(20) NOT NULL
);

create table Enrollment(
    ENR_NO NUMBER GENERATED by default as IDENTITY,
    ENR_STDNO CHAR(8) NOT NULL,
    ENR_CSID NUMBER(4) default null,
    MID_SCORE NUMBER default null,
    FINAL_SCORE NUMBER default null,
    TOTAL_SCORE NUMBER default null,
    GRADE CHAR(1) default null
);

-- 실습 2-3
insert into Student values ('20121016', '김유신', '1991-01-13', '국문학과', '2012-02-01');
insert into Student values ('20111126', '김춘추', '1992-04-11', '경제학과', '2011-02-01');
insert into Student values ('20100216', '장보고', '1991-05-23', '컴퓨터학과', '2010-02-01');
insert into Student values ('20120326', '강감찬', '1991-02-09', '영문학과', '2012-02-01');
insert into Student values ('20130416', '이순신', '1992-11-30', '경영학과', '2012-02-01');
insert into Student values ('20110521', '송상현', '1992-07-17', '컴퓨터학과', '2011-02-01');

insert into Course values (1059, '고전문학', 3, '국문학과');
insert into Course values (2312, '데이터베이스', 3, '컴퓨터학과');
insert into Course values (1203, 'Easy Writing', 3, '영문학과');
insert into Course values (2039, '글로벌경제학', 3, '경제학과');
insert into Course values (2301, '프로그래밍언어', 3, '컴퓨터학과');
insert into Course values (2303, '컴퓨터과학 개론', 2, '컴퓨터학과');
insert into Course values (3012, '마케팅 전략', 2, '경영학과');

insert into Enrollment (ENR_NO, ENR_STDNO, ENR_CSID) values (1, '20111126', 1203);
insert into Enrollment (ENR_NO, ENR_STDNO, ENR_CSID) values (2, '20121016', 2301);
insert into Enrollment (ENR_NO, ENR_STDNO, ENR_CSID) values (3, '20121016', 2303);
insert into Enrollment (ENR_NO, ENR_STDNO, ENR_CSID) values (4, '20111126', 2039);
insert into Enrollment (ENR_NO, ENR_STDNO, ENR_CSID) values (5, '20100216', 3012);
insert into Enrollment (ENR_NO, ENR_STDNO, ENR_CSID) values (6, '20120326', 3012);
insert into Enrollment (ENR_NO, ENR_STDNO, ENR_CSID) values (7, '20121016', 2312);
insert into Enrollment (ENR_NO, ENR_STDNO, ENR_CSID) values (8, '20130416', 3012);

-- 실습 2-4
SELECT * FROM STUDENT WHERE MAJOR='컴퓨터학과';

-- 실습 2-5
SELECT * FROM COURSE WHERE CS_DEPT = '컴퓨터학과';

-- 실습 2-6
SELECT * FROM ENROLLMENT WHERE ENR_STDNO = '20121016'; 

-- 실습 2-7
SELECT NAME, MAJOR, ENR_DATE FROM STUDENT
WHERE MAJOR = '국문학과';

-- 실습 2-8
SELECT * FROM COURSE WHERE CS_DEPT='컴퓨터학과' and CS_CREDIT=2;

-- 실습 2-9 ***
SELECT STDNO, NAME, BIRTH FROM STUDENT
WHERE SUBSTR(BIRTH, 0, 4)='1992';

-- 실습 2-10
UPDATE ENROLLMENT SET MID_SCORE=36, FINAL_SCORE=42
    WHERE ENR_STDNO='20111126' and ENR_CSID=1203;
    
UPDATE ENROLLMENT SET MID_SCORE = 24, FINAL_SCORE= 62
WHERE ENR_STDNO='20121016' AND ENR_CSID=2301;

UPDATE ENROLLMENT SET MID_SCORE = 28, FINAL_SCORE= 40
WHERE ENR_STDNO='20121016' AND ENR_CSID=2303;

UPDATE ENROLLMENT SET MID_SCORE = 37, FINAL_SCORE= 57
WHERE ENR_STDNO='20111126' AND ENR_CSID=2039;

UPDATE ENROLLMENT SET MID_SCORE = 28, FINAL_SCORE= 68
WHERE ENR_STDNO='20100216' AND ENR_CSID=3012;

UPDATE ENROLLMENT SET MID_SCORE = 16, FINAL_SCORE= 65
WHERE ENR_STDNO='20120326' AND ENR_CSID=3012;

UPDATE ENROLLMENT SET MID_SCORE = 18, FINAL_SCORE= 38
WHERE ENR_STDNO='20121016' AND ENR_CSID=2312;

UPDATE ENROLLMENT SET MID_SCORE = 25, FINAL_SCORE= 58
WHERE ENR_STDNO='20130416' AND ENR_CSID=3012;

SELECT * FROM ENROLLMENT;

-- 실습 2-11
UPDATE ENROLLMENT SET
    TOTAL_SCORE = MID_SCORE + FINAL_SCORE,
    GRADE = CASE
            WHEN (MID_SCORE+FINAL_SCORE) >= 90 THEN 'A'
            WHEN (MID_SCORE+FINAL_SCORE) >= 80 THEN 'B'
            WHEN (MID_SCORE+FINAL_SCORE) >= 70 THEN 'C'
            WHEN (MID_SCORE+FINAL_SCORE) >= 60 THEN 'D'
            ELSE 'F'
        END;
        
SELECT * FROM ENROLLMENT;

-- 실습 2-12
SELECT * FROM ENROLLMENT ORDER BY TOTAL_SCORE DESC;

-- 실습 2-13
SELECT * FROM ENROLLMENT
    WHERE ENR_CSID = 3012
    ORDER BY TOTAL_SCORE DESC;

-- 실습 2-14
SELECT CS_ID, CS_NAME FROM COURSE
    WHERE CS_NAME in ('데이터베이스', '프로그래밍언어');

-- 실습 2-15
SELECT CS_NAME, CS_DEPT FROM COURSE;

-- 실습 2-16
SELECT STDNO, NAME FROM STUDENT
ORDER BY NAME ASC;

-- 실습 2-17
SELECT DISTINCT ENR_STDNO FROM ENROLLMENT;

-- 실습 2-18
SELECT MAX(TOTAL_SCORE) AS 가장_큰_총점 FROM ENROLLMENT;

-- 실습 2-19
SELECT MAJOR, COUNT(*) AS 학생수
FROM STUDENT GROUP BY MAJOR;

-- 실습 2-20
SELECT ENR_CSID, COUNT(*) AS 수강_학생수
FROM ENROLLMENT
GROUP BY ENR_CSID HAVING COUNT(*)>=2;

-- 실습 2-21 ***
SELECT
    STDNO,
    NAME,
    MAJOR, ENR_CSID,
    MID_SCORE, FINAL_SCORE, TOTAL_SCORE,
    GRADE
FROM Student S
LEFT join Enrollment e on S.STDNO = e.ENR_STDNO;

-- 실습 2-22
SELECT NAME, STDNO, ENR_CSID
FROM STUDENT S
JOIN ENROLLMENT E
on e.enr_STDNO = S.STDNO
WHERE ENR_CSID=3012;

-- 실습 2-23

SELECT
    STDNO, NAME,
    COUNT(STDNO) AS "수강신청 건수",
    SUM(Total_Score) as 종합점수,
    SUM(Total_Score) / COUNT(STDNO) AS 평균
FROM STUDENT S
JOIN ENROLLMENT E on S.STDNO = E.ENR_STDNO
Group by stdno, name
order by stdno asc;


-- 실습 2-24 못풀었듬
select enr_no, enr_stdno, cs_id, cs_name, cs_credit
from enrollment E
join course c
on e.enr_csid = c.cs_id;

-- 실습 2-25
select
    count(*) as 마케팅_전략_수강_신청건수,
    avg(total_score) as 마케팅_전략_평균
from enrollment E
JOIN COURSE C on c.cs_id = e.enr_csid
where cs_name = '마케팅 전략';

-- 실습 2-26
select enr_stdno, cs_name
from enrollment e
JOIN course c on c.cs_id = e.enr_csid
where grade='A';

-- 실습 2-27
select
    stdno, name, major,
    enr_csid,
    cs_name, cs_credit,
    total_score, grade
from student s
join enrollment e on s.stdno = e.enr_stdno
join course c on e.enr_csid = c.cs_id;

-- 실습 2-28
select
    stdno, name,
    cs_name,
    total_score, grade
from student s
join enrollment e on e.enr_stdno = s.stdno
join course c on c.cs_id = e.enr_csid
where grade='F';

-- 실습 2-29
select
    stdno, name,
    sum(Cs_credit) as 이수학점
from student s
join enrollment e on s.stdno = e.enr_stdno
join course c on c.cs_id = e.enr_csid
where grade != 'F'
group by stdno, name;

-- 실습 2-30
SELECT
    S.STDNO,
    S.NAME,
    S.MAJOR
FROM STUDENT S
WHERE S.STDNO NOT IN (
    SELECT enr_stdno from enrollment
);